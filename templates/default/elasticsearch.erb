#!/usr/bin/env bash
#
# elasticsearch
#
<% if @platform_family == 'debian' %>
### BEGIN INIT INFO
# Provides:          elasticsearch
# Required-Start:    $network $remote_fs $named
# Required-Stop:     $network $remote_fs $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts elasticsearch
# Description:       Starts elasticsearch using start-stop-daemon
### END INIT INFO
<% else %>
# chkconfig:   - 57 47
# description: elasticsearch
# processname: elasticsearch
# config:      <%= node['elastic']['base_dir'] %>/etc/elasticsearch/elasticsearch.yml
<% end %>

# Source networking configuration
#
if [ -f /etc/sysconfig/network ]; then source /etc/sysconfig/network; fi

# Set limits for environments ignoring `/etc/security/limits.d`
#

PIDFILE="/tmp/elasticsearch.pid"


start() {
    ulimit -n <%= @nofile_limit %> 2>&1 > /dev/null
    ulimit -l <%= @memlock_limit %> 2>&1 > /dev/null

    if [ -f $PIDFILE ]; then
      # PIDFILE EXISTS -- ES RUNNING?
      echo -e "PID file found in $PIDFILE"
      es_pid="$(cat $PIDFILE)"
      pid_running="$( ps ax | grep 'java' | grep $es_pid )"

      if [ ! -z "$pid_running" ] ; then
        # EXIT IF ES IS ALREADY RUNNING
	      echo -e "PID $es_pid still alive, Elasticsearch already running..."
	      return 1
      fi
    fi


    touch $PIDFILE && chown <%= node['elastic']['user'] %> $PIDFILE
    su <%= node['elastic']['user'] %> -c "<%= node['elastic']['base_dir'] %>/bin/elasticsearch-start.sh"
}

stop() {
    <%= node['elastic']['base_dir'] %>/bin/elasticsearch-stop.sh E
}

restart() {
    stop
    sleep 1
    start
}

status() {
  # GOT PIDFILE?
  [ -f $PIDFILE ] && pid=`cat $PIDFILE`

  # RUNNING
  if [[ $pid && -d "/proc/$pid" ]]; then
#    version=$(curl -s 'http://<%= @elastic_ip %>:<%= @http_port %>' | ruby -rubygems -e 'require "json"; print JSON.parse(STDIN.read)['version']['number']')
#    echo -e "elasticsearch $version running with PID $pid"
   echo -e "elasticsearch running with PID $pid"
    # VERBOSE
    if [[ $pid && $1 == '-v' || $1 == '--verbose' ]]; then
      curl -s 'http://<%= @elastic_ip %>:<%= node['elastic']['port'] %>/_cluster/<%= node['elastic']['cluster_name'] %>/<%= node['elastic']['node_name'] %>?os&process&jvm&network&transport&settings&pretty' | \
      ruby -rubygems -e '
        begin
          require "json"; h = JSON.parse(STDIN.read); id, node = h['nodes'].first;
          def e(name, value); puts %Q|\e[1;36m#{(name.to_s+":").ljust(20)}\e[0m #{value || "N/A" rescue "N/A"}|; end
          e "HTTP Address",  node['http_address']
          e "Node Name",     node['name']
          e "Cluster Name",  h['cluster_name']
          e "Started",       Time.at(node['jvm']['start_time'].to_i/1000)
          e "JVM",           "#{node['jvm']['vm_name']} (#{node['jvm']['version']})"
          e "Memory Total",  node['os']['mem']['total']
          e "Open Files",    node['process']['max_file_descriptors']
          e "Configuration", node['settings']['config']
        rescue
          puts "Metadata cannot be retrieved."
        end
      '
    fi
    # INCORRECT PID?
#    if [ $pid != $CHECK_PID_RUNNING ]; then
#      echo -e "[!] Incorrect PID found in $PIDFILE: $pid"
#      return 1
#    fi
    return 0
  fi

  # NOT RUNNING
  if [[ ! $pid || ! -d "/proc/$pid" ]]; then
    echo -e "elasticsearch not running"
    return 3
  fi

  # STALE PID FOUND
  if [[ ! -d "/proc/$pid" && -f $PIDFILE ]]; then
    echo -e "[!] Stale PID found in $PIDFIL"
    return 1
  fi
}


case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart)
        restart
        ;;
  status)
        status $2
        ;;
  *)
        echo $"Usage: $0 {start|stop|restart|status [-v]|}"
        exit 1
esac

exit $?
